// Name: Golang basic snippets.
// Desc: Based on examples from gobyexample.com
// Source Name: Go By Example
// Source Url: https://gobyexample.com/
{
    "Go Hello": {
        "scope": "go",
        "prefix": "go: hello",
        "body": [
            "package main\n",
            "import (",
            "\t\"fmt\"",
            ")\n",
            "func main(){",
            "\tfmt.Println(\"Hello ${1:World}!!!\")",
            "}",
        ],
        "description": "Hello World in Golang."
    },
    "Go Variable": {
        "scope": "go",
        "prefix": "go: var",
        "body": [
            "var $1 string = \"$2\"",
        ],
        "description": "Declare a variable in Golang."
    },
    "Go Short Variable": {
        "scope": "go",
        "prefix": "go: short var",
        "body": [
            "$1 := \"$2\"",
        ],
        "description": "Declare a variable using shorthand in Golang."
    },
    "Go Constant": {
        "scope": "go",
        "prefix": "go: const",
        "body": [
            "const $1 string = \"$2\"",
        ],
        "description": "Declare a constant in Golang."
    },
    "Go Condition": {
		"scope": "go",
		"prefix": "go: cond",
		"body": [
			"switch $1 {",
			"case $2:",
			"\tfmt.Println(\"Something\")",
			"case $3:",
			"\tfmt.Println(\"Something else\")",
			"}"
		],
		"description": "Declare a condition in Golang."
	},
	"Go Array": {
		"scope": "go",
		"prefix": "go: arr",
		"body": [
			"var $1 [$2]$3"
		],
		"description": "Declare an array in Golang."
	},
	"Go Slice": {
		"scope": "go",
		"prefix": "go: slice",
		"body": [
			"${1:a} := make([]$2, $3)",
			"$1 = append($1, ${4:\"some_val\"})"
		],
		"description": "Declare a slice in Golang."
	},
	"Go Map": {
		"scope": "go",
		"prefix": "go: map",
		"body": [
			"${1:m} := make(map[${2:string}]${3:string})",
			"${1}[$4]=$5"
		],
		"description": "Declare a map in Golang."
	},
    "Go Range": {
		"scope": "go",
		"prefix": "go: range",
		"body": [
			"for k, v := range $1 {",
			"\tfmt.Printf(\"%s -> %s\", k, v)",
			"}"
		],
		"description": "A range in Golang."
	},
    "Go Func Multiple": {
		"scope": "go",
		"prefix": "go: func-mult",
		"body": [
			"func returnMultipleVals() (${1:string}, ${2:string}) {",
			"\treturn ${3:\"abc\"}, ${4:\"xyz\"}",	
			"}"
		],
		"description": "Function to return multiple values in Golang."
	},
	"Go Func Variadic": {
		"scope": "go",
		"prefix": "go: func-variadic",
		"body": [
			"func variadicFunction(${1:vals} ...${2:int}) {",
			"\tfor _, item := range $1 {",
			"\t\tfmt.Println(item)",	
			"\t}",
			"}",
		],
		"description": "Variadic function in Golang."
	},
	"Go Pointers": {
		"scope": "go",
		"prefix": "go: pointer",
		"body": [
			"func callingFunc(){",
			"\t${1:i}:=${2:1}",
			"\tcalledFunc(&$1)",
			"}\n",
			"func calledFunc(iptr *${3:int}){",
			"\t\/\/Pointer dereferenced and value assigned below.",
			"\t*iptr = ${4:0}",	
			"}",
		],
		"description": "Pointers in Golang."
	},
    "Go Struct": {
		"scope": "go",
		"prefix": "go: struct",
		"body": 

		[
			"type person struct {", 
			"\tname string", 
			"\tage  int", 
			"}\n", 
			"func createStruct() {", 
			"\ts := person{name: \"Sean\", age: 50}\n", 
			"\tfmt.Println(\"Details: \",s.name)",
			"}"
		],
		"description": "Buffered Channels in Golang."
	},
	"Go Struct Embedded": {
		"scope": "go",
		"prefix": "go: struct-embedded",
		"body":
		[
			"type ${1:base} struct {", 
			"\tsampleValX int", 
			"}\n",
			"type ${2:container} struct {",
			"\t$1", 
			"\tsampleValY string", 
			"}",
			"func sampleCall(){",
			"\tc := $2{",
			"\t\t$1 : $1{",
			"\t\t\tsampleValX: 1,",
			"\t\t},",
			"\t\tsampleValY: \"something\",",
			"\t}",
			"\tfmt.Println(c.sampleValY)",
			"}"
		],
		"description": "Embedded Struct in Golang."
	},
}